generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    walletAddress String? @unique
    activityId    String?

    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    questions     Question[]
    answers       Answer[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//   tags: string[]
//   answers: StackQuestionsItemAnswer[]
//   owner: StackQuestionsItemOwner
//   is_answered: boolean
//   view_count: number
//   answer_count: number
//   score: number
//   last_activity_date: number
//   creation_date: number
//   last_edit_date: number
//   question_id: number
//   link: string
//   title: string
//   body: string
model Question {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    userId        String
    title         String
    body          String
    tags          String[]
    answers       Answer[]
    owner         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    is_answered   Boolean? @default(false)
    view_count    Int?     @default(0)
    answer_count  Int?     @default(0)
    score         Int?     @default(0)
    communitySlug String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//   owner: StackQuestionsItemOwner
//   is_accepted: boolean
//   score: number
//   last_activity_date: number
//   creation_date: number
//   answer_id: number
//   question_id: number
//   content_license: string
model Answer {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId      String
    questionId  String
    content     String
    owner       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    is_accepted Boolean? @default(false)
    score       Int?     @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    question Question @relation(fields: [questionId], references: [id])
}
